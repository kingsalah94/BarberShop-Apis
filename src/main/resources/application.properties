# App name
spring.application.name=BarberShop-Apis


# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.show-sql=false
spring.main.allow-bean-definition-overriding=true


# ===============================
# Configuration principale
# ===============================
server.port=8080
# server.servlet.context-path=/api
# server.error.include-message=always
# server.error.include-binding-errors=always

# ===============================
# Configuration Spring
# ===============================

# Base de données
spring.datasource.url=jdbc:postgresql://localhost:5432/barbershop
spring.datasource.username=postgres
spring.datasource.password=root
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.connection-timeout=20000

# JPA / Hibernate
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.batch_versioned_data=true

#=======================================
# Redis
#=======================================
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=2000ms

#========================================
# Pool Jedis
#========================================
spring.data.redis.jedis.pool.max-active=8
spring.data.redis.jedis.pool.max-idle=8
spring.data.redis.jedis.pool.min-idle=0

#========================================
# Email
#========================================
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:your-email@gmail.com}
spring.mail.password=${MAIL_PASSWORD:your-app-password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com

#=========================================
# Upload
#=========================================
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.file-size-threshold=2KB

#=========================================
# Jackson
#=========================================
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.default-property-inclusion=non-null


# ===============================
# JWT
# ===============================
jwt.secret=${JWT_SECRET:bArBeRsHoP2024SecretKeyForJwtTokenGeneration123456789}
# 15 minutes en ms
jwt.access-token-expiration=900000
# 7 jours en ms
jwt.refresh-token-expiration=604800000

#================================
# OAuth2
#================================
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email

spring.security.oauth2.client.registration.facebook.client-id=${FACEBOOK_CLIENT_ID}
spring.security.oauth2.client.registration.facebook.client-secret=${FACEBOOK_CLIENT_SECRET}
spring.security.oauth2.client.registration.facebook.scope=email,public_profile


# ===============================
# CORS
# ===============================
cors.allowed-origins[0]=http://localhost:4200
cors.allowed-origins[1]=http://localhost:3000
cors.allowed-origins[2]=https://yourdomain.com
cors.allowed-methods[0]=GET
cors.allowed-methods[1]=POST
cors.allowed-methods[2]=PUT
cors.allowed-methods[3]=DELETE
cors.allowed-methods[4]=PATCH
cors.allowed-methods[5]=OPTIONS
cors.allowed-headers[0]=*
cors.exposed-headers[0]=X-User-Id
cors.exposed-headers[1]=X-User-Role
cors.exposed-headers[2]=X-Token-Refresh-Needed
cors.exposed-headers[3]=X-Token-Expires-In
cors.allow-credentials=true
cors.max-age=3600

# ===============================
# Swagger / Springdoc
# ===============================
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.show-actuator=true

# ===============================
# Logs
# ===============================
logging.level.com.barbershop=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.file.name=logs/barbershop.log
logging.logback.rollingpolicy.max-file-size=10MB
logging.logback.rollingpolicy.max-history=30

# ===============================
# Actuator
# ===============================
management.endpoints.web.exposure.include=health,info,metrics,env,configprops
management.endpoint.health.show-details=when-authorized
management.info.env.enabled=true

# ===============================
# Info
# ===============================
info.app.name=Barber Shop API
info.app.description=API REST pour application de réservation de coiffure
info.app.version=1.0.0
info.app.developer=Votre Nom
info.app.contact=your-email@example.com

# ===============================
# Uploads
# ===============================
file.upload.directory=${UPLOAD_DIR:./uploads}
file.upload.max-size=10485760
file.upload.allowed-types[0]=image/jpeg
file.upload.allowed-types[1]=image/jpg
file.upload.allowed-types[2]=image/png
file.upload.allowed-types[3]=image/gif
file.upload.allowed-types[4]=image/webp

# ===============================
# Notifications
# ===============================
notification.email.enabled=true
notification.email.from=${NOTIFICATION_EMAIL:noreply@barbershop.com}
notification.email.templates.welcome=classpath:templates/email/welcome.html
notification.email.templates.password-reset=classpath:templates/email/password-reset.html
notification.email.templates.booking-confirmation=classpath:templates/email/booking-confirmation.html
notification.sms.enabled=${SMS_ENABLED:false}
notification.sms.provider=twilio
notification.sms.account-sid=${TWILIO_ACCOUNT_SID:}
notification.sms.auth-token=${TWILIO_AUTH_TOKEN:}
notification.sms.from-number=${TWILIO_FROM_NUMBER:}

# ===============================
# Paiements
# ===============================
payment.stripe.public-key=${STRIPE_PUBLIC_KEY:pk_test_...}
payment.stripe.secret-key=${STRIPE_SECRET_KEY:sk_test_...}
payment.stripe.webhook-secret=${STRIPE_WEBHOOK_SECRET:whsec_...}
payment.paypal.client-id=${PAYPAL_CLIENT_ID:}
payment.paypal.client-secret=${PAYPAL_CLIENT_SECRET:}
payment.paypal.mode=${PAYPAL_MODE:sandbox}

# ===============================
# Google Maps
# ===============================
maps.google.api-key=${GOOGLE_MAPS_API_KEY:your-google-maps-api-key}
maps.google.enabled=true

# ===============================
# Cache
# ===============================
cache.redis.enabled=${CACHE_ENABLED:true}
cache.redis.ttl.user-profile=3600
cache.redis.ttl.salon-list=1800
cache.redis.ttl.barberService-list=7200
cache.redis.ttl.barber-availability=300

# ===============================
# Business Rules
# ===============================
business.booking.advance-booking-days=30
business.booking.cancellation-hours=24
business.booking.reminder-hours=2
business.booking.slot-duration-minutes=30
business.working-hours.default-start=09:00
business.working-hours.default-end=19:00
business.working-hours.break-start=12:00
business.working-hours.break-end=14:00
business.pricing.currency=EUR
business.pricing.tax-rate=0.20

# ===============================
# Sécurité
# ===============================
security.password.min-length=8
security.password.require-uppercase=true
security.password.require-lowercase=true
security.password.require-digit=true
security.password.require-special-char=false
security.account-lockout.max-attempts=5
security.account-lockout.lockout-duration-minutes=30
security.session.timeout-minutes=30

# ===============================
# Rate Limiting
# ===============================
rate-limit.login.capacity=5
rate-limit.login.refill-tokens=1
rate-limit.login.refill-period=300


# ===============================
# Fierbase
# ===============================
firebase.config.path=firebase-barberService-account.json


# ===============================
# SMS Notifications Twilio
# ===============================

# Désactiver SMS temporairement
sms.enabled=false
twilio.account-sid=ACe2453ee6aae078fbd590e5551b5579ef
twilio.auth-token=d4b4ed667328824afed0938cb4c845d6
twilio.phone-number=+22798349883

# ---------- RabbitMQ ----------
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# ---------- Outbox (noms Rabbit) ----------
app.outbox.exchange=notifications.exchange
app.outbox.routingKey=booking.notifications
app.outbox.queue=notifications.queue

# Batch de lecture Outbox à chaque run (toutes les 2s)
# app.outbox.batch-size=100

# Backoff (si erreur d’envoi vers Rabbit) - géré côté code si tu l’implémentes
# app.outbox.backoff.initial-ms=2000
# app.outbox.backoff.multiplier=2.0
# app.outbox.backoff.max-ms=60000

# Kafka configuration
spring.kafka.bootstrap-servers=localhost:9092

# Producer configuration
spring.kafka.producer.acks=all
spring.kafka.producer.retries=10
spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.properties.max.in.flight.requests.per.connection=5
spring.kafka.producer.properties.delivery.timeout.ms=120000
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Outbox application properties
app.outbox.topic=booking.notifications
app.outbox.batch-size=100
app.outbox.backoff.initial-ms=2000
app.outbox.backoff.multiplier=2.0
app.outbox.backoff.max-ms=60000

